TANUSH(2024101013):

Bug Fixes and UI Enhancements

After analyzing the application across both frontend and backend components, I've identified several issues and made comprehensive improvements to ensure functionality and visual appeal.

1. Backend Issues in `quiz.py`

Problem 1.1: Always returning the same question
The `get_question()` endpoint always returns question #1 instead of selecting a random question.

Problem 1.2: HTTP Method Mismatch
The answer submission endpoint uses GET instead of POST.

Problem 1.3: Data Retrieval Method
The answer endpoint expects to receive data as a parameter but doesn't properly parse POST body data.

Solution 1: Backend Fixes
Fixed `quiz.py` by: returning random questions, changing answer endpoint to POST method, updating parameter extraction to use FastAPI's Body, and adding proper router prefix.

2. Frontend Issues in `quiz.js`

Problem 2.1: Endpoint Path Mismatch
Frontend makes a POST request but the backend expects a GET request.

Problem 2.2: Double Request Issue
The updated code was making two separate requests - one initial request without data and a second with query parameters.

Solution 2: Frontend Fixes
Fixed `quiz.js` by: keeping the POST method to match updated backend, sending data in request body as JSON, removing redundant second request, and adding better error handling.

3. Navigation and Structural Issues

Problem 3.1: Navigation Inconsistency
Navigation menu across HTML files was inconsistent with missing links on certain pages.

Problem 3.2: Missing Container in items.html
The items.html page was missing the container div, causing layout issues.

Problem 3.3: Incorrect Script Path in profile.html
The profile.html file had an incorrect path to the JavaScript file.

Solution 3: HTML Structure Fixes
Fixed structural issues by: adding consistent navigation to all HTML pages, including missing container div to items.html, correcting script path in profile.html, and enhancing index.html structure.

4. UI Enhancement with CSS

Problem 4
The application lacked consistent styling and visual appeal.

Solution 4
Created comprehensive CSS with: modern design language, interactive elements, page-specific styling, and accessibility/UX improvements.

5. Items Functionality Issues

Problem 5.1: Broken Router Configuration in items.py
The backend router was incorrectly defined.

Problem 5.2: Duplicate Route Handlers
Two identical POST handlers for item creation existed.

Problem 5.3: Incorrect Delete Endpoint
Delete endpoint had unnecessary parameters and logic.

Problem 5.4: Poor Error Handling in Frontend
The frontend JavaScript lacked proper error handling for API operations.

Problem 5.5: Non-Semantic HTML Structure
Item list was rendered as basic elements without proper structure or styling.

Solution 5: Items Functionality Fixes
Fixed items functionality by: properly initializing router with prefix and tags, removing duplicate POST handler, fixing delete endpoint, adding robust error handling, enhancing UI with semantic HTML, and improving user feedback.

6. Data Models Improvements

Problem 6.1: Incomplete User Models
The UserBase model had a required bio field and was missing UserCreate and User implementations.

Problem 6.2: Missing Configuration for User Model
No Config class was defined for User model for proper MongoDB integration.

Solution 6: Models Fixes
Enhanced models.py by: making bio field optional in UserBase, implementing UserCreate with password field, creating complete User model with MongoDB ID handling, adding created_at timestamp, and configuring proper JSON encoding for ObjectId.

7. MongoDB Connection Issues

Problem 7.1: Asynchronous MongoDB Client Error
MongoDB client showing "AttributeError: type object 'MongoClient' has no attribute 'bulk_write'" when using motor async client.

Problem 7.2: Relative Import Issues
Main.py using relative imports that caused errors when running the application.

Problem 7.3: Database Connection Management
No proper startup and shutdown handling for the MongoDB connection.

Solution 7: Database and API Configuration Fixes
Fixed MongoDB issues by: switching to synchronous pymongo client, implementing proper connection management with FastAPI events, adding error handling for database operations, and converting database access to use app state.

--------------------------------------------------------------------------------------------

DHRUV(2024111011):

Items.js:

-- Appliction/json instead of application/html [BUG]
-- DELETE instead of POST in function name deleteItem [BUG]

db.py:

-- Made the function async and added await for the ping command [BUG]

-- Properly documented the return type and exceptions in the docstring [NOT_BUG]

-- Included the client in the returned dictionary to allow for proper cleanup by the caller [NOT_BUG]

-- Added client cleanup in the exception handler [MAYBE_BUG]

-- Removed the inconsistent error handling (now just logs and re-raises) [MAYBE_BUG]

-- Ensured the function always either returns the collections dict or raises an exception [NOT_BUG]


--------------------------------------------------------------------------------------------

ARUSHI(2024101075):

I changed the quiz.py and tried to make it work correct and more efficiently
Made code functional and thread-safe, making it suitable for a basic quiz application.
used asyncio.Lock 

--------------------------------------------------------------------------------------------

RISHABH(2024101070):

1. Incorrect script path: src="styles/profile.js" should be src="scripts/profile.js" in profile.html
2. userCounts ID doesn't match JavaScript which uses userCount in profile.html
3. in profile.js adding baseURL variable
4. added function to show all current users in profile.js
5. changed post to get in @get_users in users.py
6. changed delete all to delete one with a filter to find the required data from databse
7. added try except block for security and catching if the user_id is not found

--------------------------------------------------------------------------------------------

KESHAV(2024101051):

Analysis of items.py for Specified Bugs:

1. Incorrect router initialization
   - Issue: router = {} initializes router as a dictionary, but FastAPI expects an APIRouter object. This causes a runtime error when FastAPI tries to register routes, breaking the entire file.
   - Type: Code-breaking bug
   - Fix: Replace router = {} with router = APIRouter().

2. Duplicate create_item endpoint
   - Issue: Two @router.post("/") endpoints for create_item exist. The second one (return {"id": "Item Inserted"}) is unreachable because FastAPI uses the first endpoint, making it redundant and confusing.
   - Type: Unnecessary code section
   - Fix: Remove the second @router.post("/") endpoint.

3. Incorrect delete_item endpoint parameters
   - Issue: The @router.delete("/{item_id}/{item_details}") endpoint expects item_details as a path parameter and attempts to delete an item using ObjectId(item_details). This is likely to cause a runtime error (InvalidId from bson) if item_details is not a valid ObjectId, as it's unclear why a second ObjectId is needed. The dual deletion logic also violates REST conventions, making this an API design bug.
   - Type: API call bug
   - Fix: Remove the item_details parameter and second deletion, simplifying to delete only the item specified by item_id.

4. Incorrect response in delete_item
   - Issue: The delete_item endpoint returns {"status": "deleted", "deleted_item": result2}, where result2 is the deletion result for item_details. This can break if result2 is not as expected (e.g., no deletion occurred), and it's misleading because it doesn't confirm the deletion of item_id. The check if result.deleted_count only verifies the first deletion, potentially returning an incorrect response.
   - Type: Code-breaking bug
   - Fix: Update the response to confirm deletion of item_id only, removing result2.

5. Incorrect response in delete_item
   - Issue: The delete_item endpoint returns {"status": "deleted", "deleted_item": result2}, where result2 is the result of deleting an item by item_details. This is misleading because result2 may not correspond to the primary item deletion (item_id), and the response doesn't confirm the deletion of item_id. Additionally, the if result.deleted_count check only verifies the first deletion, not both.
   - Fix: If both deletions are intentional, check both result and result2 and return a clear response.

6. Missing import
   - Issue: The file uses init_db from db, but there's no explicit import statement (from db import init_db). While it's imported inside get_items_collection, this could cause issues if init_db is not properly defined or if the import is removed accidentally.
   - Fix: Add from db import init_db at the top for clarity and reliability.

7. No validation in create_item
   - Issue: The create_item endpoint doesn't validate the Item model before inserting it into the database. If the item contains invalid or missing fields, it could lead to inconsistent data in MongoDB.
   - Fix: Add validation or ensure the Item model (from models) enforces required fields.

8. Potential MongoDB connection issue
   - Issue: The get_items_collection function relies on init_db from db. If init_db fails to initialize the MongoDB connection (e.g., due to incorrect credentials or unavailable database), all endpoints will fail. There's no error handling for this case.
   - Fix: Add try-except handling in get_items_collection.

Analysis of analytics.py for Specified Bugs:

1. Code-breaking bug: Incorrect data access in users
   - Issue: The users list is initialized with ["A1", "B2", "C3"], then appended with MongoDB documents. The code accesses user["usernames"] for all users, which raises a KeyError for "A1", "B2", "C3" (strings, not dictionaries). This breaks the code at runtime.
   - Type: Code-breaking bug
   - Fix: Remove the hardcoded ["A1", "B2", "C3"] to only use MongoDB documents.

2. Single-word bug: Incorrect field name in user_username_lengths
   - Issue: The code uses "usernames" (plural) instead of "username" (singular, likely the correct field in the User model). This causes a KeyError if the model uses "username", breaking the code.
   - Type: Single-word bug
   - Fix: Change "usernames" to "username".

3. Single-word bug: Incorrect field name in item_name_lengths
   - Issue: The code uses "names" (plural) instead of "name" (singular, likely the correct field in the Item model). This causes a KeyError if the model uses "name", breaking the code.
   - Type: Single-word bug
   - Fix: Change "names" to "name".

4. Unnecessary code: Unused image_base64
   - Issue: The histogram is generated and encoded as image_base64, but the response only returns "stats". This makes the plotting code (from plt.figure to plt.close) unnecessary, as it's executed but not used.
   - Type: Unnecessary code section
   - Fix: Include image_base64 in the response to make the histogram code necessary.
